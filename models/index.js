const sequelize = require('../config/db');
const Product = require('./product');
const Category = require('./Category');
const Cart = require('./Cart');
const Post = require('./post');
const Review = require('./review');
const User = require('./user');
const Order = require('./order');
const OrderItem = require('./OrderItem');

// Associations
Product.belongsTo(Category);
Category.hasMany(Product);

Cart.belongsTo(Product);
Product.hasMany(Cart);

Review.belongsTo(Product);
Product.hasMany(Review);

// Order associations
Order.hasMany(OrderItem, { foreignKey: 'orderId' });
OrderItem.belongsTo(Order, { foreignKey: 'orderId' });

OrderItem.belongsTo(Product, { foreignKey: 'productId' });
Product.hasMany(OrderItem, { foreignKey: 'productId' });

// Quan h·ªá Category ‚Üî Post
Category.hasMany(Post, { as: 'category_posts', foreignKey: 'category_id' });
Post.belongsTo(Category, { foreignKey: 'category_id' });

// Quan h·ªá Category ‚Üî Product
Category.hasMany(Product, { as: 'category_products', foreignKey: 'category_id' });
Product.belongsTo(Category, { as: 'category', foreignKey: 'category_id' });

// Quan h·ªá User ‚Üî Post
User.hasMany(Post, { as: 'user_posts', foreignKey: 'author_id' });
Post.belongsTo(User, { as: 'author', foreignKey: 'author_id' });

// Quan h·ªá Product ‚Üî Cart
Product.hasMany(Cart, { as: 'cartItems', foreignKey: 'productId' });
Cart.belongsTo(Product, { as: 'product', foreignKey: 'productId' });

// Function ƒë·ªÉ sync database
const syncDatabase = async (force = false) => {
  try {
    if (force) {
      // T·∫Øt foreign key checks ƒë·ªÉ c√≥ th·ªÉ x√≥a b·∫£ng theo th·ª© t·ª± b·∫•t k·ª≥
      console.log('üîí Disabling foreign key checks...');
      await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');
      
      // X√≥a b·∫£ng theo th·ª© t·ª± ƒë·ªÉ tr√°nh foreign key constraint
      console.log('üóëÔ∏è Dropping existing tables...');
      try {
        await sequelize.drop();
        console.log('‚úÖ All tables dropped successfully');
      } catch (dropError) {
        console.log('‚ö†Ô∏è Some tables may not exist, continuing...');
      }
      
      // B·∫≠t l·∫°i foreign key checks
      console.log('üîì Re-enabling foreign key checks...');
      await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
    }
    
    // T·∫°o b·∫£ng theo th·ª© t·ª± ƒë√∫ng ƒë·ªÉ tr√°nh foreign key constraint
    console.log('üèóÔ∏è Creating tables in correct order...');
    
    // 1. T·∫°o b·∫£ng Users tr∆∞·ªõc (kh√¥ng c√≥ foreign key)
    await User.sync({ force: false });
    console.log('‚úÖ Users table ready');
    
    // 2. T·∫°o b·∫£ng Categories (kh√¥ng c√≥ foreign key)
    await Category.sync({ force: false });
    console.log('‚úÖ Categories table ready');
    
    // 3. T·∫°o b·∫£ng Products (c√≥ foreign key ƒë·∫øn Categories)
    await Product.sync({ force: false });
    console.log('‚úÖ Products table ready');
    
    // 4. T·∫°o b·∫£ng Posts
    try {
      await Post.sync({ force: false });
      console.log('‚úÖ Posts table ready');
    } catch (postError) {
      console.log('‚ö†Ô∏è Posts table sync failed, but continuing...');
      console.log('Error details:', postError.message);
    }
    
    // 5. T·∫°o b·∫£ng Cart
    try {
      await Cart.sync({ force: false });
      console.log('‚úÖ Cart table ready');
    } catch (cartError) {
      console.log('‚ö†Ô∏è Cart table sync failed, but continuing...');
      console.log('Error details:', cartError.message);
    }
    
    // 6. T·∫°o b·∫£ng Review
    try {
      await Review.sync({ force: false });
      console.log('‚úÖ Review table ready');
    } catch (reviewError) {
      console.log('‚ö†Ô∏è Review table sync failed, but continuing...');
      console.log('Error details:', reviewError.message);
    }
    
    // 7. T·∫°o b·∫£ng Order
    try {
      await Order.sync({ force: false });
      console.log('‚úÖ Order table ready');
    } catch (orderError) {
      console.log('‚ö†Ô∏è Order table sync failed, but continuing...');
      console.log('Error details:', orderError.message);
    }
    
    // 8. T·∫°o b·∫£ng OrderItem
    try {
      await OrderItem.sync({ force: false });
      console.log('‚úÖ OrderItem table ready');
    } catch (orderItemError) {
      console.log('‚ö†Ô∏è OrderItem table sync failed, but continuing...');
      console.log('Error details:', orderItemError.message);
    }
    
    console.log(`‚úÖ Database synced successfully${force ? ' with new schema' : ' (preserved existing data)'}`);
    return true;
  } catch (error) {
    console.error('‚ùå Database sync error:', error);
    // ƒê·∫£m b·∫£o b·∫≠t l·∫°i foreign key checks n·∫øu c√≥ l·ªói
    try {
      await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
    } catch (e) {
      console.log('‚ö†Ô∏è Could not re-enable foreign key checks');
    }
    return false;
  }
};

// Export models
module.exports = {
  sequelize,
  Product,
  Post,
  Review,
  User,
  Category,
  Cart,
  Order,
  OrderItem,
  syncDatabase
};
