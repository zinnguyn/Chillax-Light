const { Product, Category } = require('../models');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// C·∫•u h√¨nh multer cho upload file
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = 'uploads/products';
    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // T·∫°o t√™n file unique v·ªõi timestamp
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'product-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // Gi·ªõi h·∫°n 5MB
  },
  fileFilter: function (req, file, cb) {
    // Ch·ªâ cho ph√©p upload image
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Ch·ªâ cho ph√©p upload file h√¨nh ·∫£nh!'), false);
    }
  }
});

const productController = {
  // Danh s√°ch s·∫£n ph·∫©m
  index: async (req, res) => {
    try {
      const products = await Product.findAll({
        include: [{ model: Category, as: 'category' }],
        order: [['createdAt', 'DESC']]
      });
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo tr·∫°ng th√°i
      const totalProducts = products.length;
      const publishedProducts = products.filter(p => p.stock > 0).length;
      const outOfStockProducts = products.filter(p => p.stock === 0).length;
      
      res.render('admin/products/index', {
        title: 'Qu·∫£n l√Ω s·∫£n ph·∫©m',
        products,
        categories: await Category.findAll({ order: [['name', 'ASC']] }),
        stats: {
          total: totalProducts,
          published: publishedProducts,
          outOfStock: outOfStockProducts
        }
      });
    } catch (error) {
      console.error('L·ªói danh s√°ch s·∫£n ph·∫©m:', error);
      req.flash('error_msg', 'L·ªói t·∫£i s·∫£n ph·∫©m');
      res.redirect('/admin');
    }
  },

  // Form th√™m ho·∫∑c s·ª≠a s·∫£n ph·∫©m
  showForm: async (req, res) => {
    try {
      const categories = await Category.findAll({ order: [['name', 'ASC']] });
      let product = null;

      if (req.params.id) {
        product = await Product.findByPk(req.params.id);
        if (!product) {
          req.flash('error_msg', 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
          return res.redirect('/admin/products');
        }
      }

      res.render('admin/products/form', {
        title: product ? 'Ch·ªânh s·ª≠a s·∫£n ph·∫©m' : 'Th√™m s·∫£n ph·∫©m',
        product,
        categories,
        action: product ? `/admin/products/edit/${product.id}` : '/admin/products/add'
      });
    } catch (error) {
      console.error('L·ªói form s·∫£n ph·∫©m:', error);
      req.flash('error_msg', 'L·ªói t·∫£i form s·∫£n ph·∫©m');
      res.redirect('/admin/products');
    }
  },

  // T·∫°o s·∫£n ph·∫©m m·ªõi
  create: async (req, res) => {
    try {
      console.log('üîÑ Starting product creation...');
      console.log('üìù Request body:', req.body);
      console.log('üìÅ Request file:', req.file);
      
      const { 
        productName: name, 
        productDescription: description, 
        productPrice: price, 
        productStock: stock, 
        productCategory: category_id,
        productOriginalPrice: originalPrice,
        productIsFeatured: isFeatured,
        productIsFavorite: isFavorite,
        productIsNew: isNew,
        productSalePercentage: salePercentage
      } = req.body;

      console.log('üîç Extracted data:', {
        name,
        description,
        price,
        stock,
        category_id,
        originalPrice,
        isFeatured,
        isFavorite,
        isNew,
        salePercentage
      });

      // Validation
      if (!name || !description || !price || !stock || !category_id) {
        console.log('‚ùå Validation failed:', { name, description, price, stock, category_id });
        req.flash('error_msg', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
        return res.redirect('/admin/products/add');
      }

      const parsedPrice = parseFloat(price);
      if (isNaN(parsedPrice) || parsedPrice < 0) {
        console.log('‚ùå Price validation failed:', { price, parsedPrice });
        req.flash('error_msg', 'Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
        return res.redirect('/admin/products/add');
      }

      const parsedStock = parseInt(stock);
      if (isNaN(parsedStock) || parsedStock < 0) {
        console.log('‚ùå Stock validation failed:', { stock, parsedStock });
        req.flash('error_msg', 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng h·ª£p l·ªá');
        return res.redirect('/admin/products/add');
      }

      let imageUrl = '/images/default-product.png';
      if (req.file) {
        imageUrl = '/uploads/products/' + req.file.filename;
        console.log('üì∏ Image uploaded:', imageUrl);
      }

      const productData = {
        name: name.trim(),
        description: description.trim(),
        price: parsedPrice,
        originalPrice: originalPrice ? parseFloat(originalPrice) : null,
        stock: parsedStock,
        imageUrl: imageUrl,
        category_id: parseInt(category_id),
        isFeatured: isFeatured === 'on',
        isFavorite: isFavorite === 'on',
        isNew: isNew === 'on',
        salePercentage: salePercentage ? parseInt(salePercentage) : null,
        soldCount: 0
      };

      console.log('üíæ Attempting to save product:', productData);

      const newProduct = await Product.create(productData);
      
      console.log('‚úÖ Product created successfully:', newProduct.toJSON());
      console.log('üÜî New product ID:', newProduct.id);

      req.flash('success_msg', 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
      res.redirect('/admin/products');
    } catch (error) {
      console.error('‚ùå Error creating product:', error);
      console.error('‚ùå Error stack:', error.stack);
      req.flash('error_msg', 'L·ªói t·∫°o s·∫£n ph·∫©m: ' + error.message);
      res.redirect('/admin/products/add');
    }
  },

  // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  update: async (req, res) => {
    try {
      const productId = req.params.id;
      const product = await Product.findByPk(productId);
      
      if (!product) {
        req.flash('error_msg', 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
        return res.redirect('/admin/products');
      }

      const { 
        productName: name, 
        productDescription: description, 
        productPrice: price, 
        productStock: stock, 
        productCategory: category_id,
        productOriginalPrice: originalPrice,
        productIsFeatured: isFeatured,
        productIsFavorite: isFavorite,
        productIsNew: isNew,
        productSalePercentage: salePercentage
      } = req.body;

      // Validation
      if (!name || !description || !price || !stock || !category_id) {
        req.flash('error_msg', 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
        return res.redirect(`/admin/products/edit/${productId}`);
      }

      const parsedPrice = parseFloat(price);
      if (isNaN(parsedPrice) || parsedPrice < 0) {
        req.flash('error_msg', 'Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
        return res.redirect(`/admin/products/edit/${productId}`);
      }

      const parsedStock = parseInt(stock);
      if (isNaN(parsedStock) || parsedStock < 0) {
        req.flash('error_msg', 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng h·ª£p l·ªá');
        return res.redirect(`/admin/products/edit/${productId}`);
      }

      // X·ª≠ l√Ω h√¨nh ·∫£nh
      let imageUrl = product.imageUrl;
      if (req.file) {
        // X√≥a h√¨nh ·∫£nh c≈© n·∫øu kh√¥ng ph·∫£i default
        if (product.imageUrl && product.imageUrl !== '/images/default-product.png') {
          const oldImagePath = product.imageUrl.replace('/uploads/', 'uploads/');
          if (fs.existsSync(oldImagePath)) {
            fs.unlinkSync(oldImagePath);
          }
        }
        imageUrl = '/uploads/products/' + req.file.filename;
      }

      await product.update({
        name: name.trim(),
        description: description.trim(),
        price: parsedPrice,
        originalPrice: originalPrice ? parseFloat(originalPrice) : null,
        stock: parsedStock,
        imageUrl: imageUrl,
        category_id: parseInt(category_id),
        isFeatured: isFeatured === 'on',
        isFavorite: isFavorite === 'on',
        isNew: isNew === 'on',
        salePercentage: salePercentage ? parseInt(salePercentage) : null
      });

      req.flash('success_msg', 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
      res.redirect('/admin/products');
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
      req.flash('error_msg', 'L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ' + error.message);
      res.redirect(`/admin/products/edit/${req.params.id}`);
    }
  },

  // X√≥a s·∫£n ph·∫©m
  delete: async (req, res) => {
    try {
      const productId = req.params.id;
      const product = await Product.findByPk(productId);
      
      if (!product) {
        req.flash('error_msg', 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
        return res.redirect('/admin/products');
      }

      // X√≥a h√¨nh ·∫£nh n·∫øu kh√¥ng ph·∫£i default
      if (product.imageUrl && product.imageUrl !== '/images/default-product.png') {
        const imagePath = product.imageUrl.replace('/uploads/', 'uploads/');
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
        }
      }

      await product.destroy();
      req.flash('success_msg', 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
      res.redirect('/admin/products');
    } catch (error) {
      console.error('L·ªói x√≥a s·∫£n ph·∫©m:', error);
      req.flash('error_msg', 'L·ªói x√≥a s·∫£n ph·∫©m: ' + error.message);
      res.redirect('/admin/products');
    }
  }
};

module.exports = {
  ...productController,
  upload
};
