<!-- ====== CSS ngay trong partial ====== -->
<style>
    .products-section {
        padding: 30px 0;
        text-align: center;
        background-color: #f8f8f8;
    }
    
    .product-list {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* 4 c·ªôt */
        gap: 15px; /* Kho·∫£ng c√°ch nh·ªè g·ªçn */
        padding: 0 20px;
    }
    
    .product-card {
        background: #fff;
        border-radius: 8px;
        border: 1px solid #eee;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        overflow: hidden;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.15);
    }
    
    .product-image {
        position: relative;
        height: 188.62px; /* C·ªë ƒë·ªãnh chi·ªÅu cao ·∫£nh */
        display: flex;
        align-items: center;
        justify-content: center;
        background: #fff;
    }
    
    .product-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        transition: transform 0.3s ease;
    }
    
    .product-card:hover .product-image img {
        transform: scale(1.05);
    }
    
    .discount-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: #FF69B4;
        color: #fff;
        font-size: 13px;
        font-weight: bold;
        padding: 6px 8px;
        border-radius: 5px;
    }
    
    .product-content {
        padding: 12px;
        flex-grow: 1;
    }
    
    .product-title {
        font-size: 1em;
        font-weight: bold;
        color: #555;
        margin: 0 0 8px;
        height: 2.5em;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
    
    .product-price {
        margin-bottom: 12px;
    }
    
    .current-price {
        color: #FF69B4;
        font-weight: bold;
        font-size: 1.2em;
        margin-right: 8px;
    }
    
    .old-price {
        color: #999;
        text-decoration: line-through;
        font-size: 0.9em;
    }
    
    .main-action-button {
        display: inline-block;
        padding: 8px 15px;
        color: #FF69B4;
        font-weight: bold;
        border: 2px solid #FF69B4;
        border-radius: 5px;
        text-decoration: none;
        transition: all 0.3s ease;
        white-space: nowrap;
    }
    
    .main-action-button:hover {
        background: #FF69B4;
        color: #fff;
    }
</style>

<!-- ====== HTML Product Card List ====== -->
<div class="products-section">
    <div class="product-list">
        <% products.forEach(product => { %>
        <div class="product-card" data-id="<%= product.id %>">
            <div class="product-image">
                <img src="<%= product.imageUrl || '/img/den1.png' %>" alt="<%= product.name %>" onerror="this.src='/img/den1.png'">
                <% if (product.old_price) { 
                    const discount = Math.round(((product.old_price - product.price) / product.old_price) * 100); %>
                    <span class="discount-badge">-<%= discount %>%</span>
                <% } %>
            </div>
            <div class="product-content">
                <h5 class="product-title"><%= product.name %></h5>
                <div class="product-price">
                    <span class="current-price"><%= product.price.toLocaleString() %>‚Ç´</span>
                    <% if (product.old_price) { %>
                        <span class="old-price"><%= product.old_price.toLocaleString() %>‚Ç´</span>
                    <% } %>
                </div>
                <a href="#" class="main-action-button add-to-cart-btn" data-product-id="<%= product.id %>" data-quantity="1">Th√™m v√†o gi·ªè h√†ng</a>
            </div>
        </div>
        <% }); %>
    </div>
</div>

<!-- ====== JS x·ª≠ l√Ω n√∫t Th√™m v√†o gi·ªè h√†ng ====== -->
<script>
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Product card script loaded');
    
    // Lu√¥n x·ª≠ l√Ω event listener cho n√∫t th√™m v√†o gi·ªè h√†ng
    document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const productId = btn.dataset.productId;
            const quantity = parseInt(btn.dataset.quantity) || 1;
            
            console.log('üîÑ Button clicked:', { productId, quantity });
            
            // G·ªçi API th√™m v√†o gi·ªè h√†ng
            await addToCart(productId, quantity);
            
            // Thay n√∫t th√†nh "ƒê√£ th√™m"
            btn.outerHTML = `<span class="main-action-button" style="background: #28a745; color: white; border-color: #28a745;">ƒê√£ th√™m ‚úì</span>`;
            
            // Reset sau 2 gi√¢y
            setTimeout(() => {
                const addedBtn = document.querySelector(`[data-product-id="${productId}"]`);
                if (addedBtn) {
                    addedBtn.outerHTML = `<a href="#" class="main-action-button add-to-cart-btn" data-product-id="${productId}" data-quantity="1">Th√™m v√†o gi·ªè h√†ng</a>`;
                }
            }, 2000);
        });
    });
    
    // H√†m th√™m v√†o gi·ªè h√†ng
    async function addToCart(productId, quantity = 1) {
        try {
            console.log('üîÑ Adding to cart:', { productId, quantity });
            
            const response = await fetch('/api/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity })
            });

            console.log('üì° Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('üì° API Response:', result);

            if (result.success) {
                // C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi·ªè h√†ng n·∫øu c√≥ CartManager
                if (window.CartManager && window.CartManager.instance) {
                    window.CartManager.instance.updateCartDisplay(result.cart);
                }
                
                // C·∫≠p nh·∫≠t header gi·ªè h√†ng tr·ª±c ti·∫øp
                updateHeaderCart(result.cart);
                
                console.log('‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng:', result);
                return true;
            } else {
                console.error('‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:', result.message);
                alert('L·ªói: ' + result.message);
                return false;
            }
        } catch (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi server:', error);
            alert('L·ªói k·∫øt n·ªëi server: ' + error.message);
            return false;
        }
    }
    
    // H√†m c·∫≠p nh·∫≠t header gi·ªè h√†ng
    function updateHeaderCart(cart) {
        const headerCartCounter = document.getElementById('cart-counter');
        const headerCartTotal = document.getElementById('cart-total');
        
        if (headerCartCounter) {
            headerCartCounter.textContent = cart.totalItems || 0;
            headerCartCounter.style.display = (cart.totalItems && cart.totalItems > 0) ? 'inline-flex' : 'none';
        }
        
        if (headerCartTotal) {
            const formattedPrice = formatPrice(cart.totalPrice || 0);
            headerCartTotal.textContent = formattedPrice;
        }
    }
    
    // H√†m format gi√° ti·ªÅn khi them vao gi·ªè h√†ng
    function formatPrice(price) {
        if (!price || price === 0) return '0‚Ç´';
        
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }
});
</script>
    