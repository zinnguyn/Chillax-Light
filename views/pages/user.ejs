<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>T√†i Kho·∫£n - Chillax Light</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .page-title {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        
        .user-container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 30px;
        }
        
        .user-sidebar {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
        }
        
        .user-avatar {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .user-avatar i {
            font-size: 4em;
            color: #ff7dac;
            background: #fff5f8;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
        }
        
        .user-info h3 {
            margin: 0 0 10px 0;
            color: #333;
        }
        
        .user-info p {
            color: #666;
            margin: 5px 0;
        }
        
        .nav-menu {
            margin-top: 30px;
        }
        
        .nav-item {
            display: block;
            padding: 15px;
            color: #333;
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: all 0.3s;
        }
        
        .nav-item:hover,
        .nav-item.active {
            background: #ff7dac;
            color: white;
        }
        
        .nav-item i {
            margin-right: 10px;
        }
        
        .main-content {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        
        .content-title {
            color: #333;
            margin: 0;
        }
        
        .order-card {
            border: 1px solid #eee;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s;
        }
        
        .order-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .order-number {
            font-weight: bold;
            color: #333;
        }
        
        .order-date {
            color: #666;
            font-size: 0.9em;
        }
        
        .order-status {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 500;
        }
        
        .status-pending { background: #fff3cd; color: #856404; }
        .status-confirmed { background: #d1ecf1; color: #0c5460; }
        .status-shipping { background: #d4edda; color: #155724; }
        .status-delivered { background: #d4edda; color: #155724; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        
        .order-items {
            margin-bottom: 15px;
        }
        
        .order-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .order-item:last-child {
            border-bottom: none;
        }
        
        .item-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 15px;
        }
        
        .item-details {
            flex: 1;
        }
        
        .item-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .item-price {
            color: #ff7dac;
            font-size: 0.9em;
        }
        
        .order-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        
        .order-total {
            font-weight: bold;
            color: #ff7dac;
            font-size: 1.1em;
        }
        
        .order-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: #ff7dac;
            color: white;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn:hover {
            opacity: 0.8;
        }
        
        .empty-orders {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-orders i {
            font-size: 4em;
            color: #ddd;
            margin-bottom: 20px;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        
        @media (max-width: 768px) {
            .user-container {
                grid-template-columns: 1fr;
            }
            
            .order-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .order-footer {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="page-title">üë§ T√†i Kho·∫£n C·ªßa T√¥i</h1>
        
        <div class="user-container">
            <div class="user-sidebar">
                <div class="user-avatar">
                    <i class="fas fa-user"></i>
                    <h3>Kh√°ch H√†ng</h3>
                    <p>Ch∆∞a ƒëƒÉng nh·∫≠p</p>
                </div>
                
                <div class="nav-menu">
                    <a href="#" class="nav-item active" onclick="showSection('orders')">
                        <i class="fas fa-shopping-bag"></i> ƒê∆°n H√†ng C·ªßa T√¥i
                    </a>
                    <a href="#" class="nav-item" onclick="showSection('profile')">
                        <i class="fas fa-user-edit"></i> Th√¥ng Tin C√° Nh√¢n
                    </a>
                    <a href="#" class="nav-item" onclick="showSection('addresses')">
                        <i class="fas fa-map-marker-alt"></i> ƒê·ªãa Ch·ªâ Giao H√†ng
                    </a>
                    <a href="/" class="nav-item">
                        <i class="fas fa-home"></i> V·ªÅ Trang Ch·ªß
                    </a>
                </div>
            </div>
            
            <div class="main-content">
                <div id="orders-section">
                    <div class="content-header">
                        <h2 class="content-title">üì¶ ƒê∆°n H√†ng C·ªßa T√¥i</h2>
                        <button class="btn btn-primary" onclick="refreshOrders()">
                            <i class="fas fa-sync-alt"></i> L√†m M·ªõi
                        </button>
                    </div>
                    
                    <div id="orders-content">
                        <div class="loading">
                            <i class="fas fa-spinner fa-spin fa-2x"></i>
                            <p>ƒêang t·∫£i ƒë∆°n h√†ng...</p>
                        </div>
                    </div>
                </div>
                
                <div id="profile-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">üë§ Th√¥ng Tin C√° Nh√¢n</h2>
                    </div>
                    <p>Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
                
                <div id="addresses-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">üìç ƒê·ªãa Ch·ªâ Giao H√†ng</h2>
                    </div>
                    <p>Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        class UserPage {
            constructor() {
                this.orders = [];
                this.init();
            }
            
            init() {
                this.loadOrders();
                this.bindEvents();
            }
            
            bindEvents() {
                // Bind events if needed
            }
            
            async loadOrders() {
                try {
                    const response = await fetch('/api/orders');
                    const result = await response.json();
                    
                    if (result.success) {
                        this.orders = result.orders || [];
                        this.renderOrders();
                    } else {
                        this.showError('Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng: ' + result.message);
                    }
                } catch (error) {
                    console.error('L·ªói t·∫£i ƒë∆°n h√†ng:', error);
                    this.showError('L·ªói k·∫øt n·ªëi server');
                }
            }
            
            renderOrders() {
                const ordersContent = document.getElementById('orders-content');
                
                if (this.orders.length === 0) {
                    ordersContent.innerHTML = `
                        <div class="empty-orders">
                            <i class="fas fa-shopping-bag"></i>
                            <h3>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</h3>
                            <p>B·∫°n ch∆∞a ƒë·∫∑t ƒë∆°n h√†ng n√†o. H√£y mua s·∫Øm ngay!</p>
                            <a href="/products" class="btn btn-primary">
                                <i class="fas fa-shopping-cart"></i> Mua S·∫Øm Ngay
                            </a>
                        </div>
                    `;
                    return;
                }
                
                ordersContent.innerHTML = this.orders.map(order => this.renderOrder(order)).join('');
            }
            
            renderOrder(order) {
                const statusClass = `status-${order.status}`;
                const statusText = this.getStatusText(order.status);
                const paymentStatusText = this.getPaymentStatusText(order.paymentStatus);
                
                return `
                    <div class="order-card">
                        <div class="order-header">
                            <div>
                                <div class="order-number">${order.orderNumber}</div>
                                <div class="order-date">${this.formatDate(order.createdAt)}</div>
                            </div>
                            <div class="order-status ${statusClass}">${statusText}</div>
                        </div>
                        
                        <div class="order-items">
                            ${order.OrderItems.map(item => `
                                <div class="order-item">
                                    <img src="${item.productImage || '/img/den1.png'}" alt="${item.productName}" class="item-image">
                                    <div class="item-details">
                                        <div class="item-name">${item.productName}</div>
                                        <div class="item-price">${this.formatPrice(item.unitPrice)} x ${item.quantity}</div>
                                    </div>
                                    <div class="item-price">${this.formatPrice(item.totalPrice)}</div>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div class="order-footer">
                            <div>
                                <div><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${this.getPaymentMethodText(order.paymentMethod)}</div>
                                <div><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${paymentStatusText}</div>
                                <div class="order-total">T·ªïng ti·ªÅn: ${this.formatPrice(order.totalAmount)}</div>
                            </div>
                            
                            <div class="order-actions">
                                <a href="#" class="btn btn-primary" onclick="userPage.viewOrderDetail(${order.id})">
                                    <i class="fas fa-eye"></i> Chi Ti·∫øt
                                </a>
                                ${order.status === 'pending' ? `
                                    <button class="btn btn-danger" onclick="userPage.cancelOrder(${order.id})">
                                        <i class="fas fa-times"></i> H·ªßy
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            getStatusText(status) {
                const statusMap = {
                    'pending': 'Ch·ªù x√°c nh·∫≠n',
                    'confirmed': 'ƒê√£ x√°c nh·∫≠n',
                    'shipping': 'ƒêang giao',
                    'delivered': 'ƒê√£ giao',
                    'cancelled': 'ƒê√£ h·ªßy'
                };
                return statusMap[status] || status;
            }
            
            getPaymentStatusText(status) {
                const statusMap = {
                    'pending': 'Ch·ªù thanh to√°n',
                    'paid': 'ƒê√£ thanh to√°n',
                    'failed': 'Thanh to√°n th·∫•t b·∫°i'
                };
                return statusMap[status] || status;
            }
            
            getPaymentMethodText(method) {
                const methodMap = {
                    'cod': 'Thanh to√°n khi nh·∫≠n h√†ng (COD)',
                    'bank': 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
                    'momo': 'V√≠ MoMo',
                    'zalopay': 'ZaloPay'
                };
                return methodMap[method] || method;
            }
            
            formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
            
            formatPrice(price) {
                if (!price || price === 0) return '0‚Ç´';
                
                return new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(price);
            }
            
            async cancelOrder(orderId) {
                if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?')) {
                    return;
                }
                
                try {
                    const response = await fetch(`/api/orders/${orderId}/cancel`, {
                        method: 'PUT'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('ƒê√£ h·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!');
                        this.loadOrders(); // T·∫£i l·∫°i danh s√°ch
                    } else {
                        alert('Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng: ' + result.message);
                    }
                } catch (error) {
                    console.error('L·ªói h·ªßy ƒë∆°n h√†ng:', error);
                    alert('C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng');
                }
            }
            
            viewOrderDetail(orderId) {
                // C√≥ th·ªÉ m·ªü modal ho·∫∑c chuy·ªÉn trang chi ti·∫øt
                alert('Ch·ª©c nƒÉng xem chi ti·∫øt ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
            }
            
            showError(message) {
                const ordersContent = document.getElementById('orders-content');
                ordersContent.innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>${message}</p>
                        <button onclick="userPage.loadOrders()">Th·ª≠ l·∫°i</button>
                    </div>
                `;
            }
        }
        
        // Global functions
        function showSection(sectionName) {
            // Hide all sections
            document.querySelectorAll('[id$="-section"]').forEach(section => {
                section.style.display = 'none';
            });
            
            // Show selected section
            document.getElementById(sectionName + '-section').style.display = 'block';
            
            // Update active nav item
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.classList.add('active');
        }
        
        function refreshOrders() {
            if (window.userPage) {
                window.userPage.loadOrders();
            }
        }
        
        // Initialize user page when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const userPage = new UserPage();
            window.userPage = userPage;
        });
    </script>
</body>
</html>
