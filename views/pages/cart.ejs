<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gi·ªè H√†ng - Chillax Light</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .page-title {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        
        .cart-container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
        }
        
        .cart-items {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .cart-item {
            display: grid;
            grid-template-columns: 100px 2fr 1fr 1fr auto;
            gap: 20px;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #eee;
        }
        
        .cart-item:last-child {
            border-bottom: none;
        }
        
        .item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }
        
        .item-info h3 {
            margin: 0 0 10px 0;
            color: #333;
        }
        
        .item-price {
            color: #ff7dac;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .quantity-btn {
            background: #ff7dac;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .quantity-btn:hover {
            background: #e06b9a;
        }
        
        .quantity-input {
            width: 50px;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 5px;
        }
        
        .remove-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        .remove-btn:hover {
            background: #c82333;
        }
        
        .cart-summary {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
        }
        
        .summary-item {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .summary-item:last-child {
            border-bottom: none;
            font-weight: bold;
            font-size: 1.2em;
            color: #ff7dac;
        }
        
        .checkout-btn {
            background: #ff7dac;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
        }
        
        .checkout-btn:hover {
            background: #e06b9a;
        }
        
        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-cart i {
            font-size: 4em;
            color: #ddd;
            margin-bottom: 20px;
        }
        
        .continue-shopping {
            background: #ff7dac;
            color: white;
            text-decoration: none;
            padding: 15px 30px;
            border-radius: 25px;
            display: inline-block;
            margin-top: 20px;
        }
        
        .continue-shopping:hover {
            background: #e06b9a;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            text-align: center;
        }
        
        @media (max-width: 768px) {
            .cart-container {
                grid-template-columns: 1fr;
            }
            
            .cart-item {
                grid-template-columns: 80px 1fr;
                gap: 15px;
            }
            
            .item-image {
                width: 80px;
                height: 80px;
            }
            
            .quantity-controls, .item-price, .remove-btn {
                grid-column: 2;
                justify-self: start;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="page-title">üõí Gi·ªè H√†ng</h1>
        
        <div id="cart-content">
            <div class="loading">
                <i class="fas fa-spinner fa-spin fa-2x"></i>
                <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
            </div>
        </div>
    </div>

    <script>
        class CartPage {
            constructor() {
                this.cartItems = [];
                this.init();
            }
            
            init() {
                this.loadCart();
                this.bindEvents();
            }
            
            bindEvents() {
                // Bind quantity change events
                document.addEventListener('change', (e) => {
                    if (e.target.classList.contains('quantity-input')) {
                        const cartItemId = e.target.dataset.cartItemId;
                        const quantity = parseInt(e.target.value);
                        this.updateQuantity(cartItemId, quantity);
                    }
                });
                
                // Bind remove button events
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('remove-btn')) {
                        const cartItemId = e.target.dataset.cartItemId;
                        this.removeItem(cartItemId);
                    }
                });
            }
            
            async loadCart() {
                try {
                    const response = await fetch('/api/cart');
                    const result = await response.json();
                    
                    if (result.success) {
                        this.cartItems = result.cart.items || [];
                        this.renderCart();
                    } else {
                        this.showError('Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng: ' + result.message);
                    }
                } catch (error) {
                    console.error('L·ªói t·∫£i gi·ªè h√†ng:', error);
                    this.showError('L·ªói k·∫øt n·ªëi server');
                }
            }
            
            renderCart() {
                const cartContent = document.getElementById('cart-content');
                
                if (this.cartItems.length === 0) {
                    cartContent.innerHTML = `
                        <div class="empty-cart">
                            <i class="fas fa-shopping-cart"></i>
                            <h2>Gi·ªè h√†ng tr·ªëng</h2>
                            <p>B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng</p>
                            <a href="/products" class="continue-shopping">Ti·∫øp t·ª•c mua s·∫Øm</a>
                        </div>
                    `;
                    return;
                }
                
                const totalItems = this.cartItems.reduce((sum, item) => sum + item.quantity, 0);
                const totalPrice = this.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                
                cartContent.innerHTML = `
                    <div class="cart-container">
                        <div class="cart-items">
                            <h2>S·∫£n ph·∫©m (${totalItems})</h2>
                            ${this.cartItems.map(item => this.renderCartItem(item)).join('')}
                        </div>
                        
                        <div class="cart-summary">
                            <h2>T·ªïng quan</h2>
                            <div class="summary-item">
                                <span>S·ªë l∆∞·ª£ng:</span>
                                <span>${totalItems}</span>
                            </div>
                            <div class="summary-item">
                                <span>T·∫°m t√≠nh:</span>
                                <span>${this.formatPrice(totalPrice)}</span>
                            </div>
                            <div class="summary-item">
                                <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                                <span>Mi·ªÖn ph√≠</span>
                            </div>
                            <div class="summary-item">
                                <span>T·ªïng c·ªông:</span>
                                <span>${this.formatPrice(totalPrice)}</span>
                            </div>
                            
                            <button class="checkout-btn" onclick="cartPage.proceedToCheckout()">
                                Ti·∫øn h√†nh thanh to√°n
                            </button>
                        </div>
                    </div>
                `;
            }
            
            renderCartItem(item) {
                return `
                    <div class="cart-item" data-cart-item-id="${item.id}">
                        <img src="${item.product.imageUrl || '/img/den1.png'}" alt="${item.product.name}" class="item-image" onerror="this.src='/img/den1.png'">
                        
                        <div class="item-info">
                            <h3>${item.product.name}</h3>
                            <p class="item-price">${this.formatPrice(item.price)}</p>
                        </div>
                        
                        <div class="quantity-controls">
                            <button class="quantity-btn" onclick="cartPage.changeQuantity(${item.id}, ${item.quantity - 1})">-</button>
                            <input type="number" class="quantity-input" value="${item.quantity}" min="1" data-cart-item-id="${item.id}">
                            <button class="quantity-btn" onclick="cartPage.changeQuantity(${item.id}, ${item.quantity + 1})">+</button>
                        </div>
                        
                        <div class="item-price">
                            ${this.formatPrice(item.price * item.quantity)}
                        </div>
                        
                        <button class="remove-btn" data-cart-item-id="${item.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
            }
            
            async updateQuantity(cartItemId, quantity) {
                if (quantity <= 0) {
                    this.removeItem(cartItemId);
                    return;
                }
                
                try {
                    const response = await fetch('/api/cart/update', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ cartItemId, quantity })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        this.cartItems = result.cart.items || [];
                        this.renderCart();
                        this.updateHeaderCart(result.cart);
                    } else {
                        this.showError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ' + result.message);
                    }
                } catch (error) {
                    console.error('L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
                    this.showError('L·ªói k·∫øt n·ªëi server');
                }
            }
            
            async removeItem(cartItemId) {
                if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?')) {
                    return;
                }
                
                try {
                    const response = await fetch(`/api/cart/${cartItemId}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        this.cartItems = result.cart.items || [];
                        this.renderCart();
                        this.updateHeaderCart(result.cart);
                    } else {
                        this.showError('Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m: ' + result.message);
                    }
                } catch (error) {
                    console.error('L·ªói x√≥a s·∫£n ph·∫©m:', error);
                    this.showError('L·ªói k·∫øt n·ªëi server');
                }
            }
            
            changeQuantity(cartItemId, newQuantity) {
                if (newQuantity < 1) return;
                
                const quantityInput = document.querySelector(`input[data-cart-item-id="${cartItemId}"]`);
                if (quantityInput) {
                    quantityInput.value = newQuantity;
                    this.updateQuantity(cartItemId, newQuantity);
                }
            }
            
            updateHeaderCart(cart) {
                // C·∫≠p nh·∫≠t header gi·ªè h√†ng n·∫øu c√≥
                if (window.CartManager && window.CartManager.instance) {
                    window.CartManager.instance.updateCartDisplay(cart);
                }
                
                // C·∫≠p nh·∫≠t header gi·ªè h√†ng tr·ª±c ti·∫øp n·∫øu c√≥
                const headerCartCounter = document.getElementById('cart-counter');
                const headerCartTotal = document.getElementById('cart-total');
                
                if (headerCartCounter) {
                    headerCartCounter.textContent = cart.totalItems || 0;
                    headerCartCounter.style.display = (cart.totalItems && cart.totalItems > 0) ? 'inline-flex' : 'none';
                }
                
                if (headerCartTotal) {
                    const formattedPrice = this.formatPrice(cart.totalPrice || 0);
                    headerCartTotal.textContent = formattedPrice;
                }
            }
            
            formatPrice(price) {
                if (!price || price === 0) return '0‚Ç´';
                
                return new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(price);
            }
            
            showError(message) {
                const cartContent = document.getElementById('cart-content');
                cartContent.innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>${message}</p>
                        <button onclick="location.reload()">Th·ª≠ l·∫°i</button>
                    </div>
                `;
            
         
            }
            
            proceedToCheckout() {
                // Ki·ªÉm tra gi·ªè h√†ng c√≥ s·∫£n ph·∫©m kh√¥ng
                if (this.cartItems.length === 0) {
                    alert('Gi·ªè h√†ng tr·ªëng! Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.');
                    return;
                }
                
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
                window.location.href = '/checkout';
            }
        }
        
        // Initialize cart page when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const cartPage = new CartPage();
            window.cartPage = cartPage; // Make cartPage instance globally accessible
        });
    </script>
</body>
</html>
